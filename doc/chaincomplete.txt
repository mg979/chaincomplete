*chaincomplete.txt* chaincomplete

CHAINCOMPLETE - TABLE OF CONTENTS                              *chaincomplete*
==============================================================================

  Features........................................... |chaincomplete-features|
  Quick start........................................ |chaincomplete-quick|
  Commands........................................... |chaincomplete-commands|
  Plugs.............................................. |chaincomplete-plugs|
  Chains and methods................................. |chaincomplete-methods|
  Settings........................................... |chaincomplete-settings|
  Registering custom methods......................... |chaincomplete-custom|
  Credits............................................ |chaincomplete-credits|
  License............................................ |chaincomplete-license|



This is a completion plugin that leverages on built-in |ins-completion|,
similar to |vim-mucomplete| {1}.

Each buffer can have its own completion chain, that is made of several
completion methods that are tried one after the other, until one produces some
results. Chain methods can also be skipped with a mapping.

Autocompletion (completion as you type) is supported but it's not default.

                               {1} https://github.com/lifepillar/vim-mucomplete



FEATURES                                              *chaincomplete-features*
==============================================================================

Supported completion methods:

- built-in completion methods (|ins-completion|)
- |lsp| completion (optionally fuzzy)
- custom methods, with handlers based on |complete()|

Optional features:

- autocompletion (as you type), default `disabled`
- documentation popup, default `enabled`



QUICK START                                              *chaincomplete-quick*
==============================================================================

These plugs are available:

<Plug>(ChainComplete)   start manual completion
<Plug>(ChainAdvance)    advance to next method in the chain

Example mappings:
>vim
  imap <c-j> <Plug>(ChainComplete)
  imap <c-;> <Plug>(ChainAdvance)
<

Unless you have already mapped <Tab> and <C-j> in insert mode, you don't need
any special setup.

Note that autocompletion is disabled by default. To enable it:
>lua
  -- ex command: :AutoComplete on
  vim.g.chaincomplete = { autocomplete = true }
<
while this will enable it for triggers only:
>lua
  -- ex command: :AutoComplete triggers
  vim.g.chaincomplete = { autocomplete = 'triggers' }
<
If you want to integrate it with some snippets plugin, you should use the
<Plug>s.



COMMANDS                                              *chaincomplete-commands*
==============================================================================

                                                              *:Chaincomplete*
  ChainComplete[!] {args}

Examples: >
  ChainComplete           print current chain
  ChainComplete!          edit current chain (from input)
  ChainComplete reset     reset chain to default
  ChainComplete settings  print all current settings

  ChainComplete {m1}, ... set chain to a list of methods
  ChainComplete ^spell    insert one method in the first position
  ChainComplete +spell    insert one method in the last position
  ChainComplete -spell    remove one method
  ChainComplete 2spell    insert one method in the second (or N) position
<
Read |chaincomplete-methods| to know how to define chains.

------------------------------------------------------------------------------

                                                               *:AutoComplete*
  {verbose} AutoComplete[!] {args}

{verbose} will print current settings after running the command.

{bang} will apply settings for current filetype.

{args} can be:

  `on`          enable autocompletion
  `off`         disable autocompletion
  `triggers`    enable for triggers only
  `notriggers`  disable triggers
  `reset`       reset prefix and triggers (but keep enabled state)
  `3 . ->`      space-separated arguments, with a number (needed characters to
              trigger autocompletion) and/or trigger patterns

  `triggers`, `on`, numbers (defining prefix) and symbols (defining triggers)
  can be combined.

Triggers are only supported by certain methods, and will only trigger
completion if preceded by |word| characters (unless prefix is 1).
This restriction doesn't apply to `lsp`, if you set `triggers` to `true`.

Examples:
>
  AutoComplete triggers 2

means: enable autocompletions for currently defined triggers. Keyword
autocompletion will be enabled for at least 2 |word| characters befor the
cursor. |lsp| will use its own triggers.

>
  AutoComplete 3 . ->

means: enable autocompletion, and trigger it if there's at least 3 |word|
characters before the cursor, or a single dot preceded by a |word| character,
or an arrow operator.
>
  AutoComplete .

means: enable autocompletion, but trigger it only after a dot preceded by
a |word| character.
>
  AutoComplete 2

means: enable autocompletion, trigger it if there's at least 2 |word|
characters before the cursor, don't use trigger characters.

See also |chaincomplete-autocomplete|.




CHAINS AND METHODS                                      *chaincomplete-methods*
==============================================================================

Completion chains are buffer-local, therefore can be set in a |ftplugin|.
Example:
>
  ChainComplete file lsp keyn

would set the chain for the current buffer to attempt in sequence:

  - file completion (as <C-X><C-F>)
  - lsp completion (as <C-X><C-O>)
  - words in current buffer (as <C-X><C-N>)

Built-in methods:

  `files`       |i_CTRL-X_CTRL-F|
  `omni`        |i_CTRL-X_CTRL-O|
  `lsp`         built-in LSP completion, but blocking {1}
  `lspf`        as above, but with fuzzy matching, see settings
  `user`        |i_CTRL-X_CTRL-U|
  `dictionary`  |i_CTRL-X_CTRL-K|
  `thesaurus`   |i_CTRL-X_CTRL-T|
  `keyn`        |i_CTRL-X_CTRL-N|
  `keyp`        |i_CTRL-X_CTRL-P|
  `line`        |i_CTRL-X_CTRL-L|
  `includes`    |i_CTRL-X_CTRL-I|
  `defines`     |i_CTRL-X_CTRL-D|
  `tags`        |i_CTRL-X_CTRL-]|
  `spell`       |i_CTRL-X_s|
  `vim`         |i_CTRL-X_CTRL-V|
  `c-n`         |i_CTRL-N|
  `c-p`         |i_CTRL-P|

{1} nvim-lsp default <C-x><C-o> implementation is async, differently from all
    other built-in |ins-completion| methods: this plugin uses a custom handler
    that is blocking, with a timeout.



SETTINGS                                              *chaincomplete-settings*
==============================================================================

You don't need to change the settings or initialize the plugin if the default
settings meet your needs. Otherwise set the *g:chaincomplete* variable to
a dictionary.

Default:
>lua
  vim.g.chaincomplete = {
    border = 'single',
    autocomplete = false,
    info = true,
    signature = true,
    use_hover = true,
    chain_lsp = { 'lsp', 'file', 'user', 'c-n' },
    chain_nolsp = { 'omni', 'file', 'user', 'c-n' },
    lsp_fuzzy = false,
    lsp_fuzzy_minchars = 2,
  }
<
  `border`        see |nvim_open_win()| and search 'border'
  `autocomplete`  autocompletion as you type
  `info`          info popup
  `signature`     signature help 
  `chain_lsp`     default chain for when a |lsp| client is attached to the buffer
  `chain_nolsp`   default chain for when no |lsp| client is available
  `lsp_fuzzy`     use fuzzy matching for |lsp| by default

  `fuzzy_minchars`: for methods that support fuzzy completion, the minimum
  number of characters required for the prefix to be completed in a fuzzy way

                                                  *chaincomplete-autocomplete*
The `autocomplete` option can be:

  `boolean`: if true, will be enabled for both keywords and triggers
  `string`: if it is 'triggers', then it will only be enabled for triggers
  `table`: see below

The `autocomplete` option can be a table, for example: >
>lua
  vim.g.chaincomplete = {
    autocomplete = {
      enabled = true,
      prefix = 3,
      triggers = {
        ['lua'] = { '.', ':' },
      },
    },
  }
<

This is also the default when the option is set to `true`.
It means autocomplete is enabled, needs 3 |word| characters to trigger, and
is additionally triggered by characters in 'triggers', if preceded by a |word|
character.

If 'prefix' is `false`, then only triggers will be used.

                                                      *chaincomplete-triggers*
Triggers are characters that will invoke the completion popup during
autocompletion, ignoring prefix length.

The default triggers are:
>lua
  triggers = {
    ['lua'] = { '.', ':' },
  },
<
By default, lsp triggers are NOT used for autocompletion for these filetypes,
but they are used for other filetypes. The default values reflect my personal
preference, but you may have others. The reason is that some lsp clients
define too many trigger characters, possibly disrupting signatures or
completion, and I dislike that.

There are several ways to use/define triggers:
>lua
  triggers = false
<
    No triggers will be used.
>lua
  triggers = true
<
    This will only use triggers provided by lsp clients, when they do.
>lua
  triggers = { '.', '->' }
<
    This will use the same triggers for all filetypes. Lsp triggers will be
    ignored.
>lua
  triggers = {
    ['*'] =   { '.' }, -- fallback, disables lsp triggers
    ['lua'] = { '.', ':' },
    ['c'] =   { '.', '->' },
    ['cpp'] = { '.', '->', '::' },
    ['perl'] = { '.', '->', '::' },
  }
<
    This will use the triggers defined for the filetype if present in the
    table. As a fallback, either lsp triggers or the ones in `['*']` will be
    used. If you want lsp triggers, don't use the `*` fallback, since it has
    precedence.

'triggers' should be `at most` 3 characters. So don't write longer triggers
because they won't trigger autocompletion.

See also |:AutoComplete|.





REGISTERING CUSTOM METHODS                              *chaincomplete-custom*
==============================================================================

You can create and register new methods, so that you can use them in any
chain. Methods can be async or not (blocking). For most purposes, blocking
methods work better, and are far easier to implement.

To register a new method, you must call the function:
>lua
  local chaincomplete = require'chaincomplete'
  chaincomplete.register_method(name, method)
<
Where {name} is a string (the method name that can be used in a chain) and
{method} is a table. {method} should include the following:

  `can_try`: a function that returns `true` if the method should be attempted

Then one of:

  `items`:    can be either a list-like table with |complete-items|, or
            a function returning them.
  `handler`:  a function that generates items and calls |complete()|
  `async`:    a function that generates items

For the `can_try` field, you can use:
>
  local wordchar_before = require'chaincomplete.util'.wordchar_before

Or make your own function.

-------------------------------------------------------------------------------

Methods using 'items' ~

  These methods use an internal |complete()| handler, so that you can just
  provide a list of |complete-items|.
>lua
    chaincomplete.register_method('months', {
      can_try = wordchar_before,
      items = { 'January', 'February', ... },
    })
<
  This will register a method that can complete the months names.
  If 'items' is a function, it will be called, and should return a list-like
  table with completion items. So the previous example can be rewritten:
>lua
    chaincomplete.register_method('months', {
      can_try = wordchar_before,
      items = function() return { 'January', 'February', ... } end,
    })
<
-------------------------------------------------------------------------------

Methods using 'handler' ~

  These methods use a custom handler, that is, a function that is supposed to
  call |complete()| on its own. Inside `method.handler()` you should generate
  the items, then call |complete()| on them.
>lua
    chaincomplete.register_method('months', {
      can_try = wordchar_before,
      handler = my_months_handler_function,
    })
<
-------------------------------------------------------------------------------

Methods using 'async' ~

  Async methods are considerably more complex and don't have that many use
  cases, as far as I can see. Anyway this is how you implement async sources:
>
    chaincomplete.register_method('months', {
      can_try = wordchar_before,
      async = my_async_months_handler_function,
      timeout = 500,
      cancel = cancel_my_async_handler,
    })
<
  The handler function will be called with a table as argument. The only thing
  you should do with this table, is to set the 'items' field, when you have
  generated the items to complete.

  If the items generation takes longer than 'timeout', `chaincomplete` will not
  wait for a response and resume the chain. Items generation won't be stopped,
  since it happens in your handler, so your handler function should handle the
  timeout on its own. Alternatively, if you provide a 'cancel' function, it
  will be called when the timeout expires.
  Both 'timeout' and 'cancel' are optional (default timeout is 300).

  Once 'items' have been set, the internal |complete()| handler will do the
  rest. One example:
>lua
    local function my_async_months_handler_function(async)
      -- this does nothing async, but you should get the point
      async.items = { 'January', 'February', ... }
    end




CREDITS                                                *chaincomplete-credits*
==============================================================================

Bram Moolenar for Vim
lifepillar                https://github.com/lifepillar/vim-mucomplete
Evgeni Chasnovski         https://github.com/echasnovski/mini.completion



LICENSE                                                *chaincomplete-license*
==============================================================================

MIT license

==============================================================================
vim:tw=78:ts=2:sw=2:ft=help:norl:et:fen:fdl=0:
